#version 300 es
precision mediump float;
precision highp int;

uniform highp vec4 casData[12];
uniform highp sampler2D ImageTexture;
uniform highp float param_Gammavalue;
uniform highp float envmapStrength;
uniform highp vec3 sunDir;
uniform bool receiveShadow;
uniform highp sampler2DShadow shadowMap;
uniform highp vec3 eye;
uniform highp float shadowsBias;
uniform highp vec3 sunCol;

in highp vec3 wnormal;
in highp vec3 eyeDir;
in highp vec2 texCoord;
in highp vec3 wposition;
out highp vec4 fragColor[2];

highp vec3 rgb_to_hsv(highp vec3 c)
{
    highp vec4 p = mix(vec4(c.zy, vec2(-1.0, 0.666666686534881591796875)), vec4(c.yz, vec2(0.0, -0.3333333432674407958984375)), vec4(step(c.z, c.y)));
    highp vec4 q = mix(vec4(p.xyw, c.x), vec4(c.x, p.yzx), vec4(step(p.x, c.x)));
    highp float d = q.x - min(q.w, q.y);
    highp float e = 1.0000000133514319600180897396058e-10;
    return vec3(abs(q.z + ((q.w - q.y) / ((6.0 * d) + e))), d / (q.x + e), q.x);
}

highp vec3 hsv_to_rgb(highp vec3 c)
{
    highp vec3 p = abs((fract(c.xxx + vec3(1.0, 0.666666686534881591796875, 0.3333333432674407958984375)) * 6.0) - vec3(3.0));
    return mix(vec3(1.0), clamp(p - vec3(1.0), vec3(0.0), vec3(1.0)), vec3(c.y)) * c.z;
}

highp vec3 hue_sat(highp vec3 col, highp vec4 shift)
{
    highp vec3 hsv = rgb_to_hsv(col);
    hsv.x += shift.x;
    hsv.y *= shift.y;
    hsv.z *= shift.z;
    return mix(hsv_to_rgb(hsv), col, vec3(shift.w));
}

highp vec3 surfaceAlbedo(highp vec3 baseColor, highp float metalness)
{
    return mix(baseColor, vec3(0.0), vec3(metalness));
}

highp vec3 surfaceF0(highp vec3 baseColor, highp float metalness)
{
    return mix(vec3(0.039999999105930328369140625), baseColor, vec3(metalness));
}

highp mat4 getCascadeMat(highp float d, inout int casi, inout int casIndex)
{
    highp vec4 comp = vec4(float(d > casData[8].x), float(d > casData[8].y), float(d > casData[8].z), float(d > casData[8].w));
    casi = int(min(dot(vec4(1.0, 1.0, 0.0, 0.0), comp), 2.0));
    casIndex = casi * 4;
    return mat4(vec4(casData[casIndex]), vec4(casData[casIndex + 1]), vec4(casData[casIndex + 2]), vec4(casData[casIndex + 3]));
}

highp float PCF(highp sampler2DShadow shadowMap_1, highp vec2 uv, highp float compare, highp vec2 smSize)
{
    highp vec3 _165 = vec3(uv + (vec2(-1.0) / smSize), compare);
    highp float result = texture(shadowMap_1, vec3(_165.xy, _165.z));
    highp vec3 _174 = vec3(uv + (vec2(-1.0, 0.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_174.xy, _174.z));
    highp vec3 _185 = vec3(uv + (vec2(-1.0, 1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_185.xy, _185.z));
    highp vec3 _196 = vec3(uv + (vec2(0.0, -1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_196.xy, _196.z));
    highp vec3 _204 = vec3(uv, compare);
    result += texture(shadowMap_1, vec3(_204.xy, _204.z));
    highp vec3 _215 = vec3(uv + (vec2(0.0, 1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_215.xy, _215.z));
    highp vec3 _226 = vec3(uv + (vec2(1.0, -1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_226.xy, _226.z));
    highp vec3 _237 = vec3(uv + (vec2(1.0, 0.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_237.xy, _237.z));
    highp vec3 _248 = vec3(uv + (vec2(1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_248.xy, _248.z));
    return result / 9.0;
}

highp float shadowTestCascade(highp sampler2DShadow shadowMap_1, highp vec3 eye_1, highp vec3 p, highp float shadowsBias_1)
{
    highp float d = distance(eye_1, p);
    int param;
    int param_1;
    highp mat4 _348 = getCascadeMat(d, param, param_1);
    int casi = param;
    int casIndex = param_1;
    highp mat4 LWVP = _348;
    highp vec4 lPos = LWVP * vec4(p, 1.0);
    highp vec3 _363 = lPos.xyz / vec3(lPos.w);
    lPos = vec4(_363.x, _363.y, _363.z, lPos.w);
    highp float visibility = 1.0;
    if (lPos.w > 0.0)
    {
        visibility = PCF(shadowMap_1, lPos.xy, lPos.z - shadowsBias_1, vec2(8192.0, 4096.0));
    }
    highp float nextSplit = casData[8][casi];
    highp float _389;
    if (casi == 0)
    {
        _389 = nextSplit;
    }
    else
    {
        _389 = nextSplit - casData[8][casi - 1];
    }
    highp float splitSize = _389;
    highp float splitDist = (nextSplit - d) / splitSize;
    if ((splitDist <= 0.1500000059604644775390625) && (casi != 1))
    {
        int casIndex2 = casIndex + 4;
        highp mat4 LWVP2 = mat4(vec4(casData[casIndex2]), vec4(casData[casIndex2 + 1]), vec4(casData[casIndex2 + 2]), vec4(casData[casIndex2 + 3]));
        highp vec4 lPos2 = LWVP2 * vec4(p, 1.0);
        highp vec3 _467 = lPos2.xyz / vec3(lPos2.w);
        lPos2 = vec4(_467.x, _467.y, _467.z, lPos2.w);
        highp float visibility2 = 1.0;
        if (lPos2.w > 0.0)
        {
            visibility2 = PCF(shadowMap_1, lPos2.xy, lPos2.z - shadowsBias_1, vec2(8192.0, 4096.0));
        }
        highp float lerpAmt = smoothstep(0.0, 0.1500000059604644775390625, splitDist);
        return mix(visibility2, visibility, lerpAmt);
    }
    return visibility;
}

highp vec3 lambertDiffuseBRDF(highp vec3 albedo, highp float nl)
{
    return albedo * max(0.0, nl);
}

highp float d_ggx(highp float nh, highp float a)
{
    highp float a2 = a * a;
    highp float denom = pow(((nh * nh) * (a2 - 1.0)) + 1.0, 2.0);
    return (a2 * 0.3183098733425140380859375) / denom;
}

highp float v_smithschlick(highp float nl, highp float nv, highp float a)
{
    return 1.0 / (((nl * (1.0 - a)) + a) * ((nv * (1.0 - a)) + a));
}

highp vec3 f_schlick(highp vec3 f0, highp float vh)
{
    return f0 + ((vec3(1.0) - f0) * exp2((((-5.554729938507080078125) * vh) - 6.9831600189208984375) * vh));
}

highp vec3 specularBRDF(highp vec3 f0, highp float roughness, highp float nl, highp float nh, highp float nv, highp float vh)
{
    highp float a = roughness * roughness;
    return (f_schlick(f0, vh) * (d_ggx(nh, a) * clamp(v_smithschlick(nl, nv, a), 0.0, 1.0))) / vec3(4.0);
}

void main()
{
    highp vec3 n = normalize(wnormal);
    highp vec3 vVec = normalize(eyeDir);
    highp float dotNV = max(dot(n, vVec), 0.0);
    highp vec4 ImageTexture_texread_store = texture(ImageTexture, texCoord);
    highp vec3 _650 = pow(ImageTexture_texread_store.xyz, vec3(2.2000000476837158203125));
    ImageTexture_texread_store = vec4(_650.x, _650.y, _650.z, ImageTexture_texread_store.w);
    highp vec3 ImageTexture_Color_res = ImageTexture_texread_store.xyz;
    highp vec3 HueSaturationValue_Color_res = hue_sat(ImageTexture_Color_res, vec4(-0.0160000026226043701171875, 1.0, 0.670000016689300537109375, 0.0));
    highp float Gammavalue_Value_res = param_Gammavalue;
    highp vec3 Gamma_Color_res = pow(HueSaturationValue_Color_res, vec3(Gammavalue_Value_res));
    highp float ImageTexture_Alpha_res = ImageTexture_texread_store.w;
    highp vec3 basecol = Gamma_Color_res;
    highp float roughness = 1.0;
    highp float metallic = 0.0;
    highp float occlusion = 1.0;
    highp float specular = 0.0;
    highp float emission = 0.0;
    highp float opacity = ImageTexture_Alpha_res - 0.00019999999494757503271102905273438;
    if (opacity == 1.0)
    {
        discard;
    }
    highp vec3 albedo = surfaceAlbedo(basecol, metallic);
    highp vec3 f0 = surfaceF0(basecol, metallic);
    highp vec3 indirect = albedo;
    indirect *= occlusion;
    indirect *= envmapStrength;
    highp vec3 direct = vec3(0.0);
    highp float svisibility = 1.0;
    highp vec3 sh = normalize(vVec + sunDir);
    highp float sdotNL = dot(n, sunDir);
    highp float sdotNH = dot(n, sh);
    highp float sdotVH = dot(vVec, sh);
    if (receiveShadow)
    {
        svisibility = shadowTestCascade(shadowMap, eye, wposition + ((n * shadowsBias) * 10.0), shadowsBias);
    }
    direct += (((lambertDiffuseBRDF(albedo, sdotNL) + (specularBRDF(f0, roughness, sdotNL, sdotNH, dotNV, sdotVH) * specular)) * sunCol) * svisibility);
    if (emission > 0.0)
    {
        direct = vec3(0.0);
        indirect += (basecol * emission);
    }
    highp vec4 premultipliedReflect = vec4(vec3(direct + (indirect * 0.5)) * opacity, opacity);
    highp float w = clamp((pow(min(1.0, premultipliedReflect.w * 10.0) + 0.00999999977648258209228515625, 3.0) * 100000000.0) * pow(1.0 - (gl_FragCoord.z * 0.89999997615814208984375), 3.0), 0.00999999977648258209228515625, 3000.0);
    fragColor[0] = vec4(premultipliedReflect.xyz * w, premultipliedReflect.w);
    fragColor[1] = vec4(premultipliedReflect.w * w, 0.0, 0.0, 1.0);
}

