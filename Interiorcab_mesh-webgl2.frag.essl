#version 300 es
precision mediump float;
precision highp int;

uniform highp sampler2D ImageTexture;

in highp vec3 wnormal;
in highp vec2 texCoord;
out highp vec4 fragColor[2];

highp vec2 octahedronWrap(highp vec2 v)
{
    return (vec2(1.0) - abs(v.yx)) * vec2((v.x >= 0.0) ? 1.0 : (-1.0), (v.y >= 0.0) ? 1.0 : (-1.0));
}

highp float packFloatInt16(highp float f, uint i)
{
    uint bitsInt = i << 12u;
    uint bitsFloat = uint(f * 4095.0);
    return float(bitsInt | bitsFloat);
}

highp float packFloat2(highp float f1, highp float f2)
{
    return floor(f1 * 255.0) + min(f2, 0.9900000095367431640625);
}

void main()
{
    highp vec3 n = normalize(wnormal);
    highp vec4 ImageTexture_texread_store = texture(ImageTexture, texCoord);
    highp vec3 _88 = pow(ImageTexture_texread_store.xyz, vec3(2.2000000476837158203125));
    ImageTexture_texread_store = vec4(_88.x, _88.y, _88.z, ImageTexture_texread_store.w);
    highp vec3 ImageTexture_Color_res = ImageTexture_texread_store.xyz;
    highp vec3 Gamma_Color_res = pow(ImageTexture_Color_res, vec3(1.0499999523162841796875));
    highp float ImageTexture_Alpha_res = ImageTexture_texread_store.w;
    highp vec3 basecol = Gamma_Color_res;
    highp float roughness = 0.89999997615814208984375;
    highp float metallic = 0.1500000059604644775390625;
    highp float occlusion = 1.0;
    highp float specular = 0.0;
    highp float emission = 0.0;
    highp float opacity = ImageTexture_Alpha_res - 0.00019999999494757503271102905273438;
    if (opacity < 0.99989998340606689453125)
    {
        discard;
    }
    n /= vec3((abs(n.x) + abs(n.y)) + abs(n.z));
    highp vec2 _142;
    if (n.z >= 0.0)
    {
        _142 = n.xy;
    }
    else
    {
        _142 = octahedronWrap(n.xy);
    }
    n = vec3(_142.x, _142.y, n.z);
    uint matid = 0u;
    if (emission > 0.0)
    {
        basecol *= emission;
        matid = 1u;
    }
    fragColor[0] = vec4(n.xy, roughness, packFloatInt16(metallic, matid));
    fragColor[1] = vec4(basecol, packFloat2(occlusion, specular));
}

